{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"E:\\\\reactProject\\\\Guess-Number\\\\Screens\\\\GameScreen.js\";\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport NumberContainer from \"../Components/NumberContainer\";\nimport Card from \"../Components/Card\";\n\nvar generateRandomBetween = function generateRandomBetween(min, max, exclude) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  var rndNum = Math.floor(Math.random() * (max - min)) + min;\n\n  if (rndNum === exclude) {\n    return generateRandomBetween(min, max, exclude);\n  } else {\n    return rndNum;\n  }\n};\n\nvar GameScreen = function GameScreen(props) {\n  var _useState = useState(generateRandomBetween(1, 100, userChoice)),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentGuess = _useState2[0],\n      setCurrentGuess = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      rounds = _useState4[0],\n      setRounds = _useState4[1];\n\n  var currentLow = useRef(1);\n  var currentHigh = useRef(100);\n  var userChoice = props.userChoice,\n      onGameOver = props.onGameOver;\n  useEffect(function () {\n    if (userChoice === currentGuess) {\n      onGameOver(rounds);\n    }\n  }, [currentGuess, userChoice, onGameOver]);\n\n  var nextGuessHandler = function nextGuessHandler(direction) {\n    if (direction === 'lower' && currentGuess < props.userChoice || direction === 'higher' && currentGuess > props.userChoice) {\n      Alert.alert('Don\\'t lie!', 'You know that this is wrong...', [{\n        text: 'sorry!',\n        style: 'cancel'\n      }]);\n      return;\n    }\n\n    if (direction === 'lower') {\n      currentHigh.current = currentGuess;\n    } else {\n      currentLow.current = currentGuess;\n    }\n\n    var nextNumber = generateRandomBetween(currentLow.current, currentHigh.current, currentGuess);\n    setCurrentGuess(nextNumber);\n    setRounds(rounds + 1);\n  };\n\n  return React.createElement(View, {\n    style: styles.screen,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, \"Opponent's Guess\"), React.createElement(NumberContainer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, currentGuess), React.createElement(Card, {\n    style: styles.buttonContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, React.createElement(Button, {\n    title: \"LOWER\",\n    onPress: nextGuessHandler.bind(_this, 'lower'),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }\n  }), React.createElement(Button, {\n    title: \"GREATER\",\n    onPress: nextGuessHandler.bind(_this, 'higher'),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }\n  })));\n};\n\nvar styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    padding: 10,\n    alignItems: 'center'\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    marginTop: 20,\n    width: 300,\n    maxWidth: '80%'\n  }\n});\nexport default GameScreen;","map":{"version":3,"sources":["E:/reactProject/Guess-Number/Screens/GameScreen.js"],"names":["React","useState","useRef","useEffect","NumberContainer","Card","generateRandomBetween","min","max","exclude","Math","ceil","floor","rndNum","random","GameScreen","props","userChoice","currentGuess","setCurrentGuess","rounds","setRounds","currentLow","currentHigh","onGameOver","nextGuessHandler","direction","Alert","alert","text","style","current","nextNumber","styles","screen","buttonContainer","bind","StyleSheet","create","flex","padding","alignItems","flexDirection","justifyContent","marginTop","width","maxWidth"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect} from 'react';\r\nimport { View, Text, StyleSheet, Button, Alert } from 'react-native';\r\n\r\nimport NumberContainer from '../Components/NumberContainer';\r\nimport Card from '../Components/Card';\r\n\r\nconst generateRandomBetween = (min, max, exclude) => {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    const rndNum = Math.floor(Math.random() * (max - min)) + min;\r\n    if (rndNum === exclude) {\r\n        return generateRandomBetween(min, max, exclude);\r\n    } else {\r\n        return rndNum;\r\n    }\r\n};\r\nconst GameScreen = props => {\r\n    const [currentGuess, setCurrentGuess] = useState(\r\n        generateRandomBetween(1, 100, userChoice)\r\n    );\r\n    \r\n   const [rounds, setRounds] = useState(0);\r\n    const currentLow = useRef(1);\r\n    const currentHigh = useRef(100);\r\n\r\n    const {userChoice, onGameOver} = props;\r\n\r\n  useEffect(() =>{\r\n      if(userChoice === currentGuess ){\r\n        onGameOver(rounds);\r\n      }\r\n  },[currentGuess, userChoice, onGameOver]);\r\n\r\n\r\n    const nextGuessHandler = direction => {\r\n\r\n        if (\r\n            (direction === 'lower' && currentGuess < props.userChoice) || (direction === 'higher' && currentGuess > props.userChoice)) {\r\n            Alert.alert\r\n                ('Don\\'t lie!', 'You know that this is wrong...', [{ text: 'sorry!', style: 'cancel' }\r\n                ]);\r\n            return;\r\n        }\r\n\r\n        if (direction === 'lower') {\r\n            currentHigh.current = currentGuess;\r\n        }\r\n        else {\r\n            currentLow.current = currentGuess;\r\n        }\r\n        const nextNumber = generateRandomBetween(currentLow.current,currentHigh.current, currentGuess);\r\n        setCurrentGuess(nextNumber);\r\n        setRounds(rounds+1);\r\n    };\r\n\r\n    return (\r\n        <View style={styles.screen}>\r\n            <Text>Opponent's Guess</Text>\r\n            <NumberContainer>{currentGuess}</NumberContainer>\r\n            <Card style={styles.buttonContainer}>\r\n                <Button title=\"LOWER\" onPress={nextGuessHandler.bind(this, 'lower')} />\r\n                <Button title=\"GREATER\" onPress={nextGuessHandler.bind(this, 'higher')} />\r\n            </Card>\r\n        </View>\r\n    );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n    screen: {\r\n        flex: 1,\r\n        padding: 10,\r\n        alignItems: 'center'\r\n    },\r\n    buttonContainer: {\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-around',\r\n        marginTop: 20,\r\n        width: 300,\r\n        maxWidth: '80%'\r\n    }\r\n});\r\n\r\nexport default GameScreen;\r\n"]},"metadata":{},"sourceType":"module"}